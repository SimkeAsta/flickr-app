{"version":3,"sources":["components/Header.js","components/Pictures.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Pictures","loadUser","state","per","page","data","url","fetch","then","response","json","setState","photos","photo","scrolling","total_pages","total","loadMore","prevState","handleScroll","e","lastLi","document","querySelector","lastLiOffset","offsetTop","clientHeight","window","pageYOffset","innerHeight","this","scrollListener","addEventListener","scope","map","index","srcPath","farm","server","id","secret","picTitle","title","toUpperCase","key","alt","src","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sQAEe,SAASA,IACpB,OACI,yBAAKC,UAAU,6BACX,6BACI,6D,uCCgFDC,G,wDAlFX,aAAe,IAAD,8BACV,gBAiBJC,SAAW,WAAO,IAAD,EACe,EAAKC,MAAzBC,EADK,EACLA,IAAKC,EADA,EACAA,KAAMC,EADN,EACMA,KACbC,EAAM,6IAA+IH,EAA/I,iBAA2JC,EAA3J,iCACZG,MAAMD,GACDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACF,EAAKC,SAAS,CACVN,KAAK,GAAD,mBAAMA,GAAN,YAAeK,EAAKE,OAAOC,QAC/BC,WAAW,EACXC,YAAaL,EAAKE,OAAOI,YA3B3B,EAgCdC,SAAW,WACP,EAAKN,UACD,SAAAO,GAAS,MAAK,CACVd,KAAMc,EAAUd,KAAO,EACvBU,WAAW,KAEf,EAAKb,WAtCC,EA0CdkB,aAAe,SAACC,GAAO,IAAD,EACuB,EAAKlB,MAAtCY,EADU,EACVA,UAAWC,EADD,EACCA,YAAaX,EADd,EACcA,KAChC,IAAIU,KACAC,GAAeX,GAAnB,CACA,IAAMiB,EAASC,SAASC,cAAc,yBAChCC,EAAeH,EAAOI,UAAYJ,EAAOK,aAC5BC,OAAOC,YAAcD,OAAOE,YAE9BL,EADE,IAEf,EAAKP,aAjDT,EAAKf,MAAQ,CACTG,KAAM,GACNF,IAAK,EACLC,KAAM,EACNW,YAAa,KACbD,WAAW,GAPL,E,gEAWO,IAAD,OAChBgB,KAAK7B,WACL6B,KAAKC,eAAiBJ,OAAOK,iBAAiB,UAAU,SAACZ,GACrD,EAAKD,aAAaC,Q,+BA0CtB,OACI,yBAAKrB,UAAU,aACX,2BAAOA,UAAU,SACb,+BACI,4BACI,wBAAIA,UAAU,WAAWkC,MAAM,OAAM,wCACrC,wBAAIlC,UAAU,YAAYkC,MAAM,OAAM,wBAAIlC,UAAU,SAAd,YAG9C,+BACK+B,KAAK5B,MAAMG,KAAK6B,KAAI,SAAC7B,EAAM8B,GACxB,IAAIC,EAAU,eAAiB/B,EAAKgC,KAAO,qBAAuBhC,EAAKiC,OAAS,IAAMjC,EAAKkC,GAAK,IAAMlC,EAAKmC,OAAS,OAChHC,EAAWpC,EAAKqC,MAAMC,cAC1B,OACI,wBAAIC,IAAKT,GACL,wBAAIpC,UAAU,YAAW,yBAAK8C,IAAI,OAAOC,IAAKV,KAC9C,wBAAIrC,UAAU,aAAY,4BAAK0C,e,GAzE5CM,cCYRC,MATf,WACE,OACE,6BACE,kBAAClD,EAAD,MACA,kBAAC,EAAD,QCEcmD,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2dcc377e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Header() {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div>\n                <h1>My favorite pictures of all</h1>\n            </div>\n        </div>\n    );\n}","import React, { Component } from 'react'\nimport '../styles.css'\n\nclass Pictures extends Component {\n    constructor() {\n        super();\n        this.state = {\n            data: [],\n            per: 3,\n            page: 1,\n            total_pages: null,\n            scrolling: false\n        }\n    }\n\n    componentDidMount() {\n        this.loadUser();\n        this.scrollListener = window.addEventListener('scroll', (e) => {\n            this.handleScroll(e);\n        });\n    }\n\n    loadUser = () => {\n        const { per, page, data } = this.state;\n        const url = `https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=` + process.env.REACT_APP_FLICKR_API_KEY + `&tags=nature&per_page=${per}&page=${page}&format=json&nojsoncallback=1`;\n        fetch(url)\n            .then(response => response.json())\n            .then(json => {\n                this.setState({\n                    data: [...data, ...json.photos.photo],\n                    scrolling: false,\n                    total_pages: json.photos.total\n                })\n            });\n    };\n\n    loadMore = () => {\n        this.setState(\n            prevState => ({\n                page: prevState.page + 1,\n                scrolling: true\n            }),\n            this.loadUser\n        );\n    };\n\n    handleScroll = (e) => {\n        const { scrolling, total_pages, page } = this.state;\n        if (scrolling) return;\n        if (total_pages <= page) return;\n        const lastLi = document.querySelector('tbody > tr:last-child');\n        const lastLiOffset = lastLi.offsetTop + lastLi.clientHeight;\n        const pageOffset = window.pageYOffset + window.innerHeight;\n        var bottomOffset = 20;\n        if (pageOffset > lastLiOffset - bottomOffset) {\n            this.loadMore();\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"container\" >\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th className=\"firstCol\" scope=\"col\"><h2>PICTURE</h2></th>\n                            <th className=\"secondCol\" scope=\"col\"><h2 className=\"title\">TITLE</h2></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.data.map((data, index) => {\n                            let srcPath = 'https://farm' + data.farm + '.staticflickr.com/' + data.server + '/' + data.id + '_' + data.secret + '.jpg';\n                            let picTitle = data.title.toUpperCase();\n                            return (\n                                <tr key={index}>\n                                    <td className=\"firstCol\"><img alt=\"pics\" src={srcPath}></img></td>\n                                    <td className=\"secondCol\"><h1>{picTitle}</h1></td>\n                                </tr>)\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default Pictures;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Pictures from './components/Pictures';\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Pictures />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}